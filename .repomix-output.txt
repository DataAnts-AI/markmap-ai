This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-02T22:41:12.707Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
eslint.config.mjs
LICENSE
next.config.mjs
package.json
postcss.config.js
postcss.config.mjs
public/file.svg
public/globe.svg
public/manifest.json
public/next.svg
public/robots.txt
public/sitemap.xml
public/vercel.svg
public/window.svg
README.md
src/app/about/page.tsx
src/app/api/generate-mindmap/route.ts
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/MindmapViewer.tsx
src/components/PromptForm.tsx
src/lib/mindmaps.ts
src/lib/openai.ts
src/lib/supabase.ts
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# IDE
.idea
.vscode
*.swp
*.swo
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Your Name

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "markmap-ai",
  "version": "0.1.0",
  "private": true,
  "description": "Generate beautiful, interactive mindmaps from your ideas using AI",
  "author": "Your Name",
  "license": "MIT",
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.2",
    "@supabase/supabase-js": "^2.49.1",
    "markmap-lib": "^0.18.11",
    "markmap-toolbar": "^0.18.10",
    "markmap-view": "^0.18.10",
    "next": "15.2.0",
    "openai": "^4.86.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/typography": "^0.5.10",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.2.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.3.3",
    "typescript": "^5",
    "cursor-tools": "latest"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/markmap-ai"
  },
  "keywords": [
    "mindmap",
    "ai",
    "visualization",
    "nextjs",
    "react",
    "openai"
  ]
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/manifest.json">
{
  "name": "Markmap AI",
  "short_name": "Markmap AI",
  "description": "Generate mindmaps from your ideas using AI",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3b82f6",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/robots.txt">
# Allow all web crawlers
User-agent: *
Allow: /

# Sitemap location
Sitemap: https://markmap-ai.vercel.app/sitemap.xml
</file>

<file path="public/sitemap.xml">
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://markmap-ai.vercel.app/</loc>
    <lastmod>2023-07-01</lastmod>
    <changefreq>monthly</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>https://markmap-ai.vercel.app/about</loc>
    <lastmod>2023-07-01</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
</urlset>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
# Markmap AI

Markmap AI is a web application that transforms your ideas into beautiful, interactive mindmaps using artificial intelligence. Simply enter a prompt, and watch as your thoughts come to life in a structured, visual format.

<img width="920" alt="image" src="https://github.com/user-attachments/assets/ab161662-4ef7-4c4a-9f21-9d37b05189d5" />

## Features

- **AI-Powered Mindmap Generation**: Create complex mindmaps in seconds using natural language prompts
- **Interactive Visualization**: Explore your ideas with expandable, collapsible, and navigable mindmaps
- **Beautiful UI**: Clean, modern interface built with Next.js and Tailwind CSS
- **Responsive Design**: Works seamlessly on desktop and mobile devices

## Technologies Used

- **Frontend**: Next.js 15, React, TypeScript
- **Styling**: Tailwind CSS
- **Visualization**: Markmap library
- **Form Handling**: React Hook Form with Zod validation
- **AI Integration**: API endpoints for mindmap generation

## Getting Started

### Prerequisites

- Node.js 18+ and npm

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/DataAnts-AI/markmap-ai.git
   cd markmap-ai
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Run the development server:
   ```bash
   npm run dev
   ```

4. Open [http://localhost:3000](http://localhost:3000) in your browser to see the application.

## Usage

1. Enter a prompt in the text area (e.g., "Create a mindmap about artificial intelligence and its applications")
2. Click "Generate Mindmap"
3. Explore your interactive mindmap
4. You can also try the example prompts provided below the input field

## Project Structure

```
markmap-ai/
├── src/
│   ├── app/                 # Next.js app router
│   │   ├── api/             # API routes
│   │   ├── about/           # About page
│   │   ├── globals.css      # Global styles
│   │   ├── layout.tsx       # Root layout
│   │   └── page.tsx         # Home page
│   ├── components/          # React components
│   │   ├── MindmapViewer.tsx # Mindmap visualization component
│   │   └── PromptForm.tsx   # Form for entering prompts
├── public/                  # Static assets
├── tailwind.config.js       # Tailwind CSS configuration
└── package.json             # Project dependencies and scripts
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [Markmap](https://markmap.js.org/) for the mindmap visualization library
- [Next.js](https://nextjs.org/) for the React framework
- [Tailwind CSS](https://tailwindcss.com/) for the utility-first CSS framework
</file>

<file path="src/app/about/page.tsx">
import React from 'react';
export default function AboutPage() {
  return (
    <main className="max-w-6xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">About Markmap AI</h1>
      <div className="prose max-w-none">
        <p className="text-lg mb-4">
          Markmap AI is a powerful tool that helps you visualize your ideas and concepts as interactive mindmaps.
          Using advanced AI technology, we transform your text prompts into structured, hierarchical mindmaps that
          can be easily shared, exported, and modified.
        </p>
        <h2 className="text-2xl font-semibold mt-8 mb-4">How It Works</h2>
        <ol className="list-decimal pl-6 space-y-2">
          <li>Enter a prompt or topic you want to explore</li>
          <li>Our AI analyzes your input and generates a structured mindmap</li>
          <li>View, interact with, and customize your mindmap</li>
          <li>Export or share your creation</li>
        </ol>
        <h2 className="text-2xl font-semibold mt-8 mb-4">Technology</h2>
        <p>
          Markmap AI is built using cutting-edge technologies:
        </p>
        <ul className="list-disc pl-6 space-y-2 mt-2">
          <li>Next.js for the frontend framework</li>
          <li>OpenAI's language models for content generation</li>
          <li>Markmap library for rendering interactive mindmaps</li>
          <li>Tailwind CSS for styling</li>
        </ul>
        <h2 className="text-2xl font-semibold mt-8 mb-4">Use Cases</h2>
        <div className="grid md:grid-cols-2 gap-6 mt-4">
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-2">Education</h3>
            <p>Create study guides, organize course content, and visualize complex topics for better understanding and retention.</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-2">Business</h3>
            <p>Plan projects, brainstorm ideas, organize meetings, and create presentation outlines quickly and efficiently.</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-2">Personal Development</h3>
            <p>Map out goals, organize thoughts, plan life events, and visualize personal growth journeys.</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-2">Research</h3>
            <p>Organize research findings, explore connections between concepts, and structure literature reviews.</p>
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="src/app/api/generate-mindmap/route.ts">
import { NextResponse } from 'next/server';
import { generateMindmap } from '@/lib/openai';
export async function POST(request: Request) {
  try {
    const { prompt } = await request.json();
    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      );
    }
    const markdown = await generateMindmap(prompt);
    return NextResponse.json({ markdown });
  } catch (error) {
    console.error('Error in generate-mindmap API:', error);
    return NextResponse.json(
      { error: 'Failed to generate mindmap' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
:root {
  --background: #ffffff;
  --foreground: #171717;
}
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
body {
  color: var(--foreground);
  background: var(--background);
}
.markmap {
  width: 100%;
  height: 100%;
  min-height: 500px;
}
.markmap-wrapper {
  width: 100%;
  height: 100%;
  border-radius: 0.5rem;
  overflow: hidden;
  background-color: #f9fafb;
  border: 1px solid #e5e7eb;
}
@layer components {
  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors;
  }
  .btn-secondary {
    @apply bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors;
  }
  .input-field {
    @apply w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import React from "react";
const inter = Inter({ subsets: ["latin"] });
export const metadata: Metadata = {
  title: "Markmap AI - Generate Mindmaps with AI",
  description: "Create beautiful mindmaps from your ideas using AI",
};
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <header className="bg-white shadow-sm">
          <div className="max-w-6xl mx-auto px-4 py-4 flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="w-6 h-6 text-blue-600"
              >
                <circle cx="12" cy="12" r="10" />
                <line x1="2" y1="12" x2="22" y2="12" />
                <line x1="12" y1="2" x2="12" y2="22" />
              </svg>
              <span className="font-bold text-xl">Markmap AI</span>
            </div>
            <nav>
              <ul className="flex space-x-4">
                <li>
                  <a href="/" className="text-gray-600 hover:text-blue-600">
                    Home
                  </a>
                </li>
                <li>
                  <a href="/about" className="text-gray-600 hover:text-blue-600">
                    About
                  </a>
                </li>
              </ul>
            </nav>
          </div>
        </header>
        {children}
        <footer className="bg-gray-100 mt-12">
          <div className="max-w-6xl mx-auto px-4 py-8">
            <p className="text-center text-gray-600">
              &copy; {new Date().getFullYear()} Markmap AI. All rights reserved.
            </p>
          </div>
        </footer>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
'use client';
import React, { useState } from 'react';
import PromptForm from '@/components/PromptForm';
import MindmapViewer from '@/components/MindmapViewer';
export default function Home() {
  const [markdown, setMarkdown] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const handleSubmit = (generatedMarkdown: string) => {
    setMarkdown(generatedMarkdown);
    setIsLoading(false);
  };
  const examplePrompts = [
    "Create a mindmap about artificial intelligence and its applications",
    "Generate a mindmap for project management best practices",
    "Make a mindmap explaining the solar system and planets"
  ];
  const handleExampleClick = (prompt: string) => {
    const promptFormElement = document.getElementById('prompt-textarea') as HTMLTextAreaElement;
    if (promptFormElement) {
      promptFormElement.value = prompt;
    }
  };
  return (
    <main className="flex min-h-screen flex-col items-center">
      {/* Hero Section */}
      <div className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-16">
        <div className="max-w-6xl mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold mb-4">Markmap AI</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Transform your ideas into beautiful, interactive mindmaps with the power of AI.
            Just enter a prompt and watch your thoughts come to life.
          </p>
        </div>
      </div>
      <div className="w-full max-w-6xl mx-auto px-4 py-12 space-y-12">
        {/* Main Content */}
        <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
          <div>
            <h2 className="text-2xl font-semibold mb-4">Enter Your Prompt</h2>
            <PromptForm 
              onSubmit={handleSubmit} 
              isLoading={isLoading} 
            />
            {/* Example Prompts */}
            <div className="mt-6">
              <h3 className="text-sm font-medium text-gray-500 mb-2">Try these examples:</h3>
              <div className="space-y-2">
                {examplePrompts.map((prompt, index) => (
                  <button
                    key={index}
                    onClick={() => handleExampleClick(prompt)}
                    className="block w-full text-left px-3 py-2 text-sm bg-gray-50 hover:bg-gray-100 rounded-md transition-colors"
                  >
                    {prompt}
                  </button>
                ))}
              </div>
            </div>
          </div>
          <div>
            <h2 className="text-2xl font-semibold mb-4">Your Mindmap</h2>
            <div className="h-[600px] rounded-lg overflow-hidden border border-gray-200">
              {markdown ? (
                <MindmapViewer markdown={markdown} />
              ) : (
                <div className="w-full h-full flex flex-col items-center justify-center bg-gray-50 p-8 text-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="w-12 h-12 text-gray-300 mb-4"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z"
                    />
                  </svg>
                  <p className="text-gray-500 mb-2">
                    Your mindmap will appear here
                  </p>
                  <p className="text-sm text-gray-400">
                    Enter a prompt on the left and click "Generate Mindmap"
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
        {/* Features Section */}
        <div className="py-8">
          <h2 className="text-3xl font-bold text-center mb-12">Why Use Markmap AI?</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-blue-600">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z" />
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-2">Fast Generation</h3>
              <p className="text-gray-600">Create complex mindmaps in seconds, not hours. Let AI do the heavy lifting.</p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-green-600">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.894 20.567L16.5 21.75l-.394-1.183a2.25 2.25 0 00-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 001.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 001.423 1.423l1.183.394-1.183.394a2.25 2.25 0 00-1.423 1.423z" />
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-2">Interactive Maps</h3>
              <p className="text-gray-600">Explore your ideas with interactive mindmaps that you can expand, collapse, and navigate.</p>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-purple-600">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 3v11.25A2.25 2.25 0 006 16.5h2.25M3.75 3h-1.5m1.5 0h16.5m0 0h1.5m-1.5 0v11.25A2.25 2.25 0 0118 16.5h-2.25m-7.5 0h7.5m-7.5 0l-1 3m8.5-3l1 3m0 0l.5 1.5m-.5-1.5h-9.5m0 0l-.5 1.5m.75-9l3-3 2.148 2.148A12.061 12.061 0 0116.5 7.605" />
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-2">Boost Productivity</h3>
              <p className="text-gray-600">Organize your thoughts, plan projects, and visualize complex topics with ease.</p>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="src/components/MindmapViewer.tsx">
'use client';
import React, { useEffect, useRef, useState } from 'react';
import { Transformer } from 'markmap-lib';
import { Markmap } from 'markmap-view';
import { Toolbar } from 'markmap-toolbar';
interface MindmapViewerProps {
  markdown: string;
}
export default function MindmapViewer({ markdown }: MindmapViewerProps) {
  const svgRef = useRef<SVGSVGElement>(null);
  const markmapRef = useRef<Markmap | null>(null);
  const [toolbarInstance, setToolbarInstance] = useState<Toolbar | null>(null);
  useEffect(() => {
    if (!svgRef.current || !markdown) return;
    const transformer = new Transformer();
    const { root, features } = transformer.transform(markdown);
    if (!markmapRef.current) {
      markmapRef.current = Markmap.create(svgRef.current, {
        autoFit: true,
        zoom: true,
        pan: true,
      });
    }
    markmapRef.current.setData(root);
    markmapRef.current.fit();
    // Add toolbar
    if (!toolbarInstance) {
      const toolbar = new Toolbar();
      toolbar.attach(markmapRef.current);
      setToolbarInstance(toolbar);
    }
    // No cleanup needed for toolbar
    return () => {
      // Cleanup will happen automatically when component unmounts
    };
  }, [markdown, toolbarInstance]);
  const downloadSVG = () => {
    if (!svgRef.current) return;
    // Clone the SVG to avoid modifying the displayed one
    const svgClone = svgRef.current.cloneNode(true) as SVGSVGElement;
    // Set width and height attributes
    svgClone.setAttribute('width', '1200');
    svgClone.setAttribute('height', '800');
    // Convert to string
    const svgData = new XMLSerializer().serializeToString(svgClone);
    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
    const svgUrl = URL.createObjectURL(svgBlob);
    // Create download link
    const downloadLink = document.createElement('a');
    downloadLink.href = svgUrl;
    downloadLink.download = 'mindmap.svg';
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    // Clean up
    URL.revokeObjectURL(svgUrl);
  };
  const downloadMarkdown = () => {
    if (!markdown) return;
    const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = 'mindmap.md';
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    URL.revokeObjectURL(url);
  };
  return (
    <div className="w-full h-full flex flex-col">
      <div className="markmap-wrapper flex-grow">
        <svg ref={svgRef} className="markmap" />
      </div>
      <div className="flex justify-end space-x-2 mt-4">
        <button
          onClick={downloadSVG}
          className="btn-secondary flex items-center text-sm"
          title="Download as SVG"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          SVG
        </button>
        <button
          onClick={downloadMarkdown}
          className="btn-secondary flex items-center text-sm"
          title="Download as Markdown"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Markdown
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/PromptForm.tsx">
'use client';
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
const promptSchema = z.object({
  prompt: z.string().min(10, 'Prompt must be at least 10 characters'),
});
type PromptFormValues = z.infer<typeof promptSchema>;
interface PromptFormProps {
  onSubmit: (markdown: string) => void;
  isLoading: boolean;
}
export default function PromptForm({ onSubmit, isLoading }: PromptFormProps) {
  const [error, setError] = useState<string | null>(null);
  const [charCount, setCharCount] = useState(0);
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
  } = useForm<PromptFormValues>({
    resolver: zodResolver(promptSchema),
    defaultValues: {
      prompt: '',
    },
    mode: 'onChange',
  });
  // Watch the prompt field to update character count
  const promptValue = watch('prompt');
  React.useEffect(() => {
    setCharCount(promptValue?.length || 0);
  }, [promptValue]);
  const submitPrompt = async (data: PromptFormValues) => {
    try {
      setError(null);
      const response = await fetch('/api/generate-mindmap', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: data.prompt }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate mindmap');
      }
      const result = await response.json();
      onSubmit(result.markdown);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    }
  };
  return (
    <div className="w-full">
      <form onSubmit={handleSubmit(submitPrompt)} className="space-y-4">
        <div className="relative">
          <label htmlFor="prompt-textarea" className="block text-sm font-medium mb-1 text-gray-700">
            What would you like to create a mindmap about?
          </label>
          <textarea
            id="prompt-textarea"
            {...register('prompt')}
            className="w-full h-40 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            placeholder="E.g., Create a mindmap about the history of artificial intelligence, including major milestones and key figures..."
            disabled={isLoading}
          />
          <div className="absolute bottom-3 right-3 text-xs text-gray-500">
            {charCount} characters {charCount < 10 ? `(minimum 10)` : ''}
          </div>
        </div>
        {errors.prompt && (
          <p className="mt-1 text-sm text-red-600">{errors.prompt.message}</p>
        )}
        {error && (
          <div className="p-4 bg-red-50 border-l-4 border-red-500 rounded-md">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}
        <button
          type="submit"
          disabled={isLoading || !isValid}
          className="w-full py-3 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isLoading ? (
            <div className="flex items-center justify-center">
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating Mindmap...
            </div>
          ) : (
            'Generate Mindmap'
          )}
        </button>
      </form>
    </div>
  );
}
</file>

<file path="src/lib/mindmaps.ts">
import { supabase } from './supabase';
export interface Mindmap {
  id: string;
  user_id: string;
  title: string;
  markdown_content: string;
  ai_prompt: string;
  is_public: boolean;
  created_at: string;
  updated_at: string;
}
export async function saveMindmap(
  userId: string,
  title: string,
  markdown: string,
  aiPrompt: string,
  isPublic: boolean = false
) {
  return supabase
    .from('mindmaps')
    .insert({
      user_id: userId,
      title,
      markdown_content: markdown,
      ai_prompt: aiPrompt,
      is_public: isPublic,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    })
    .select();
}
export async function getUserMindmaps(userId: string) {
  return supabase
    .from('mindmaps')
    .select('*')
    .eq('user_id', userId)
    .order('updated_at', { ascending: false });
}
export async function getMindmapById(id: string) {
  return supabase
    .from('mindmaps')
    .select('*')
    .eq('id', id)
    .single();
}
export async function updateMindmap(
  id: string,
  updates: Partial<{
    title: string;
    markdown_content: string;
    is_public: boolean;
  }>
) {
  return supabase
    .from('mindmaps')
    .update({
      ...updates,
      updated_at: new Date().toISOString(),
    })
    .eq('id', id);
}
export async function deleteMindmap(id: string) {
  return supabase
    .from('mindmaps')
    .delete()
    .eq('id', id);
}
export async function getPublicMindmaps() {
  return supabase
    .from('mindmaps')
    .select('*')
    .eq('is_public', true)
    .order('created_at', { ascending: false });
}
</file>

<file path="src/lib/openai.ts">
import OpenAI from 'openai';
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
export async function generateMindmap(prompt: string): Promise<string> {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        {
          role: "system",
          content: "You are a mindmap generator. Create a hierarchical markdown structure with # for main topic, ## for subtopics, ### for details. Use only headings, no paragraphs or other elements."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
    });
    return completion.choices[0].message.content || '';
  } catch (error) {
    console.error('Error generating mindmap:', error);
    throw new Error('Failed to generate mindmap');
  }
}
</file>

<file path="src/lib/supabase.ts">
import { createClient } from '@supabase/supabase-js';
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
export const supabase = createClient(supabaseUrl, supabaseKey);
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        blue: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
          950: '#172554',
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
